#!/bin/bash

set -e

getopt() {
  # pure-getopt, a drop-in replacement for GNU getopt in pure Bash.
  # version 1.4.5
  #
  # Copyright 2012-2021 Aron Griffis <aron@scampersand.com>
  #
  # Permission is hereby granted, free of charge, to any person obtaining
  # a copy of this software and associated documentation files (the
  # "Software"), to deal in the Software without restriction, including
  # without limitation the rights to use, copy, modify, merge, publish,
  # distribute, sublicense, and/or sell copies of the Software, and to
  # permit persons to whom the Software is furnished to do so, subject to
  # the following conditions:
  #
  # The above copyright notice and this permission notice shall be included
  # in all copies or substantial portions of the Software.
  #
  # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  # OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  # MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  # IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  # CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  # TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  # SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  _getopt_main() {
    # Returns one of the following statuses:
    #   0 success
    #   1 error parsing parameters
    #   2 error in getopt invocation
    #   3 internal error
    #   4 reserved for -T
    #
    # For statuses 0 and 1, generates normalized and shell-quoted
    # "options -- parameters" on stdout.

    declare parsed status
    declare short long='' name flags=''
    declare have_short=false

    # Synopsis from getopt man-page:
    #
    #   getopt optstring parameters
    #   getopt [options] [--] optstring parameters
    #   getopt [options] -o|--options optstring [options] [--] parameters
    #
    # The first form can be normalized to the third form which
    # _getopt_parse() understands. The second form can be recognized after
    # first parse when $short hasn't been set.

    if [[ -n ${GETOPT_COMPATIBLE+isset} || $1 == [^-]* ]]; then
      # Enable compatibility mode
      flags=c$flags
      # Normalize first to third synopsis form
      set -- -o "$1" -- "${@:2}"
    fi

    # First parse always uses flags=p since getopt always parses its own
    # arguments effectively in this mode.
    parsed=$(_getopt_parse getopt ahl:n:o:qQs:TuV \
      alternative,help,longoptions:,name:,options:,quiet,quiet-output,shell:,test,version \
      p "$@")
    status=$?
    if [[ $status != 0 ]]; then
      if [[ $status == 1 ]]; then
        echo "Try 'getopt --help' for more information." >&2
        # Since this is the first parse, convert status 1 to 2
        status=2
      fi
      return $status
    fi
    eval "set -- $parsed"

    while [[ $# -gt 0 ]]; do
      case $1 in
        (-a|--alternative)
          flags=a$flags ;;

        (-h|--help)
          _getopt_help
          return 0
          ;;

        (-l|--longoptions)
          long="$long${long:+,}$2"
          shift ;;

        (-n|--name)
          name=$2
          shift ;;

        (-o|--options)
          short=$2
          have_short=true
          shift ;;

        (-q|--quiet)
          flags=q$flags ;;

        (-Q|--quiet-output)
          flags=Q$flags ;;

        (-s|--shell)
          case $2 in
            (sh|bash)
              flags=${flags//t/} ;;
            (csh|tcsh)
              flags=t$flags ;;
            (*)
              echo 'getopt: unknown shell after -s or --shell argument' >&2
              echo "Try 'getopt --help' for more information." >&2
              return 2 ;;
          esac
          shift ;;

        (-u|--unquoted)
          flags=u$flags ;;

        (-T|--test)
          return 4 ;;

        (-V|--version)
          echo "pure-getopt 1.4.4"
          return 0 ;;

        (--)
          shift
          break ;;
      esac

      shift
    done

    if ! $have_short; then
      # $short was declared but never set, not even to an empty string.
      # This implies the second form in the synopsis.
      if [[ $# == 0 ]]; then
        echo 'getopt: missing optstring argument' >&2
        echo "Try 'getopt --help' for more information." >&2
        return 2
      fi
      short=$1
      have_short=true
      shift
    fi

    if [[ $short == -* ]]; then
      # Leading dash means generate output in place rather than reordering,
      # unless we're already in compatibility mode.
      [[ $flags == *c* ]] || flags=i$flags
      short=${short#?}
    elif [[ $short == +* ]]; then
      # Leading plus means POSIXLY_CORRECT, unless we're already in
      # compatibility mode.
      [[ $flags == *c* ]] || flags=p$flags
      short=${short#?}
    fi

    # This should fire if POSIXLY_CORRECT is in the environment, even if
    # it's an empty string.  That's the difference between :+ and +
    flags=${POSIXLY_CORRECT+p}$flags

    _getopt_parse "${name:-getopt}" "$short" "$long" "$flags" "$@"
  }

  _getopt_parse() {
    # Inner getopt parser, used for both first parse and second parse.
    # Returns 0 for success, 1 for error parsing, 3 for internal error.
    # In the case of status 1, still generates stdout with whatever could
    # be parsed.
    #
    # $flags is a string of characters with the following meanings:
    #   a - alternative parsing mode
    #   c - GETOPT_COMPATIBLE
    #   i - generate output in place rather than reordering
    #   p - POSIXLY_CORRECT
    #   q - disable error reporting
    #   Q - disable normal output
    #   t - quote for csh/tcsh
    #   u - unquoted output

    declare name="$1" short="$2" long="$3" flags="$4"
    shift 4

    # Split $long on commas, prepend double-dashes, strip colons;
    # for use with _getopt_resolve_abbrev
    declare -a longarr
    _getopt_split longarr "$long"
    longarr=( "${longarr[@]/#/--}" )
    longarr=( "${longarr[@]%:}" )
    longarr=( "${longarr[@]%:}" )

    # Parse and collect options and parameters
    declare -a opts params
    declare o alt_recycled=false error=0

    while [[ $# -gt 0 ]]; do
      case $1 in
        (--)
          params=( "${params[@]}" "${@:2}" )
          break ;;

        (--*=*)
          o=${1%%=*}
          if ! o=$(_getopt_resolve_abbrev "$o" "${longarr[@]}"); then
            error=1
          elif [[ ,"$long", == *,"${o#--}"::,* ]]; then
            opts=( "${opts[@]}" "$o" "${1#*=}" )
          elif [[ ,"$long", == *,"${o#--}":,* ]]; then
            opts=( "${opts[@]}" "$o" "${1#*=}" )
          elif [[ ,"$long", == *,"${o#--}",* ]]; then
            if $alt_recycled; then o=${o#-}; fi
            _getopt_err "$name: option '$o' doesn't allow an argument"
            error=1
          else
            echo "getopt: assertion failed (1)" >&2
            return 3
          fi
          alt_recycled=false
          ;;

        (--?*)
          o=$1
          if ! o=$(_getopt_resolve_abbrev "$o" "${longarr[@]}"); then
            error=1
          elif [[ ,"$long", == *,"${o#--}",* ]]; then
            opts=( "${opts[@]}" "$o" )
          elif [[ ,"$long", == *,"${o#--}::",* ]]; then
            opts=( "${opts[@]}" "$o" '' )
          elif [[ ,"$long", == *,"${o#--}:",* ]]; then
            if [[ $# -ge 2 ]]; then
              shift
              opts=( "${opts[@]}" "$o" "$1" )
            else
              if $alt_recycled; then o=${o#-}; fi
              _getopt_err "$name: option '$o' requires an argument"
              error=1
            fi
          else
            echo "getopt: assertion failed (2)" >&2
            return 3
          fi
          alt_recycled=false
          ;;

        (-*)
          if [[ $flags == *a* ]]; then
            # Alternative parsing mode!
            # Try to handle as a long option if any of the following apply:
            #  1. There's an equals sign in the mix -x=3 or -xy=3
            #  2. There's 2+ letters and an abbreviated long match -xy
            #  3. There's a single letter and an exact long match
            #  4. There's a single letter and no short match
            o=${1::2} # temp for testing #4
            if [[ $1 == *=* || $1 == -?? || \
                  ,$long, == *,"${1#-}"[:,]* || \
                  ,$short, != *,"${o#-}"[:,]* ]]; then
              o=$(_getopt_resolve_abbrev "${1%%=*}" "${longarr[@]}" 2>/dev/null)
              case $? in
                (0)
                  # Unambiguous match. Let the long options parser handle
                  # it, with a flag to get the right error message.
                  set -- "-$1" "${@:2}"
                  alt_recycled=true
                  continue ;;
                (1)
                  # Ambiguous match, generate error and continue.
                  _getopt_resolve_abbrev "${1%%=*}" "${longarr[@]}" >/dev/null
                  error=1
                  shift
                  continue ;;
                (2)
                  # No match, fall through to single-character check.
                  true ;;
                (*)
                  echo "getopt: assertion failed (3)" >&2
                  return 3 ;;
              esac
            fi
          fi

          o=${1::2}
          if [[ "$short" == *"${o#-}"::* ]]; then
            if [[ ${#1} -gt 2 ]]; then
              opts=( "${opts[@]}" "$o" "${1:2}" )
            else
              opts=( "${opts[@]}" "$o" '' )
            fi
          elif [[ "$short" == *"${o#-}":* ]]; then
            if [[ ${#1} -gt 2 ]]; then
              opts=( "${opts[@]}" "$o" "${1:2}" )
            elif [[ $# -ge 2 ]]; then
              shift
              opts=( "${opts[@]}" "$o" "$1" )
            else
              _getopt_err "$name: option requires an argument -- '${o#-}'"
              error=1
            fi
          elif [[ "$short" == *"${o#-}"* ]]; then
            opts=( "${opts[@]}" "$o" )
            if [[ ${#1} -gt 2 ]]; then
              set -- "$o" "-${1:2}" "${@:2}"
            fi
          else
            if [[ $flags == *a* ]]; then
              # Alternative parsing mode! Report on the entire failed
              # option. GNU includes =value but we omit it for sanity with
              # very long values.
              _getopt_err "$name: unrecognized option '${1%%=*}'"
            else
              _getopt_err "$name: invalid option -- '${o#-}'"
              if [[ ${#1} -gt 2 ]]; then
                set -- "$o" "-${1:2}" "${@:2}"
              fi
            fi
            error=1
          fi ;;

        (*)
          # GNU getopt in-place mode (leading dash on short options)
          # overrides POSIXLY_CORRECT
          if [[ $flags == *i* ]]; then
            opts=( "${opts[@]}" "$1" )
          elif [[ $flags == *p* ]]; then
            params=( "${params[@]}" "$@" )
            break
          else
            params=( "${params[@]}" "$1" )
          fi
      esac

      shift
    done

    if [[ $flags == *Q* ]]; then
      true  # generate no output
    else
      echo -n ' '
      if [[ $flags == *[cu]* ]]; then
        printf '%s -- %s' "${opts[*]}" "${params[*]}"
      else
        if [[ $flags == *t* ]]; then
          _getopt_quote_csh "${opts[@]}" -- "${params[@]}"
        else
          _getopt_quote "${opts[@]}" -- "${params[@]}"
        fi
      fi
      echo
    fi

    return $error
  }

  _getopt_err() {
    if [[ $flags != *q* ]]; then
      printf '%s\n' "$1" >&2
    fi
  }

  _getopt_resolve_abbrev() {
    # Resolves an abbrevation from a list of possibilities.
    # If the abbreviation is unambiguous, echoes the expansion on stdout
    # and returns 0.  If the abbreviation is ambiguous, prints a message on
    # stderr and returns 1. (For first parse this should convert to exit
    # status 2.)  If there is no match at all, prints a message on stderr
    # and returns 2.
    declare a q="$1"
    declare -a matches=()
    shift
    for a; do
      if [[ $q == "$a" ]]; then
        # Exact match. Squash any other partial matches.
        matches=( "$a" )
        break
      elif [[ $flags == *a* && $q == -[^-]* && $a == -"$q" ]]; then
        # Exact alternative match. Squash any other partial matches.
        matches=( "$a" )
        break
      elif [[ $a == "$q"* ]]; then
        # Abbreviated match.
        matches=( "${matches[@]}" "$a" )
      elif [[ $flags == *a* && $q == -[^-]* && $a == -"$q"* ]]; then
        # Abbreviated alternative match.
        matches=( "${matches[@]}" "${a#-}" )
      fi
    done
    case ${#matches[@]} in
      (0)
        [[ $flags == *q* ]] || \
        printf "$name: unrecognized option %s\\n" >&2 \
          "$(_getopt_quote "$q")"
        return 2 ;;
      (1)
        printf '%s' "${matches[0]}"; return 0 ;;
      (*)
        [[ $flags == *q* ]] || \
        printf "$name: option %s is ambiguous; possibilities: %s\\n" >&2 \
          "$(_getopt_quote "$q")" "$(_getopt_quote "${matches[@]}")"
        return 1 ;;
    esac
  }

  _getopt_split() {
    # Splits $2 at commas to build array specified by $1
    declare IFS=,
    eval "$1=( \$2 )"
  }

  _getopt_quote() {
    # Quotes arguments with single quotes, escaping inner single quotes
    declare s space='' q=\'
    for s; do
      printf "$space'%s'" "${s//$q/$q\\$q$q}"
      space=' '
    done
  }

  _getopt_quote_csh() {
    # Quotes arguments with single quotes, escaping inner single quotes,
    # bangs, backslashes and newlines
    declare s i c space
    for s; do
      echo -n "$space'"
      for ((i=0; i<${#s}; i++)); do
        c=${s:i:1}
        case $c in
          (\\|\'|!)
            echo -n "'\\$c'" ;;
          ($'\n')
            echo -n "\\$c" ;;
          (*)
            echo -n "$c" ;;
        esac
      done
      echo -n \'
      space=' '
    done
  }

  _getopt_help() {
    cat <<-EOT

	Usage:
	 getopt <optstring> <parameters>
	 getopt [options] [--] <optstring> <parameters>
	 getopt [options] -o|--options <optstring> [options] [--] <parameters>

	Parse command options.

	Options:
	 -a, --alternative             allow long options starting with single -
	 -l, --longoptions <longopts>  the long options to be recognized
	 -n, --name <progname>         the name under which errors are reported
	 -o, --options <optstring>     the short options to be recognized
	 -q, --quiet                   disable error reporting by getopt(3)
	 -Q, --quiet-output            no normal output
	 -s, --shell <shell>           set quoting conventions to those of <shell>
	 -T, --test                    test for getopt(1) version
	 -u, --unquoted                do not quote the output

	 -h, --help                    display this help
	 -V, --version                 display version

	For more details see getopt(1).
	EOT
  }

  _getopt_version_check() {
    if [[ -z $BASH_VERSION ]]; then
      echo "getopt: unknown version of bash might not be compatible" >&2
      return 1
    fi

    # This is a lexical comparison that should be sufficient forever.
    if [[ $BASH_VERSION < 2.05b ]]; then
      echo "getopt: bash $BASH_VERSION might not be compatible" >&2
      return 1
    fi

    return 0
  }

  _getopt_version_check
  _getopt_main "$@"
  declare status=$?
  unset -f _getopt_main _getopt_err _getopt_parse _getopt_quote \
    _getopt_quote_csh _getopt_resolve_abbrev _getopt_split _getopt_help \
    _getopt_version_check
  return $status
}


function join_by { local d=$1; shift; local f=$1; shift; printf %s "$f" "${@/#/$d}"; }

shopt -s extglob
function parse_options() {
    local IFS=
    local shorts=() longs=()
    while read -r line; do
        saved=$line
        if [[ "$line" = +( )-?,* ]]; then
            short=${line#+( )-}
            short=${short%%,*}
            line=${line##+( )-?,*( )}
        else
            line=${line##*( )}
            short=''
        fi
        long=${line#--}
        long=${long%% *}
        line="${line#--* }"
        if [[ "$line" != +( )* ]]; then
            arged=':'
        else
            arged=''
        fi
        if [[ -n "$short" ]]; then
            shorts+=("$short$arged")
        fi
        longs+=("$long$arged")
    done < <("$@"  | sed -n '/^[Oo]ptions:/,/^$/p' | grep '^[\t ]*-')
    echo "getopt --options +$(join_by '' "${shorts[@]}") --long $(join_by ',' "${longs[@]}") --"
}
# shopt -u extglob

function is_homeport_container () {
    return 0
}

function echo_archlinux_dockerfile () {
    cat <<EOF
# syntax=docker/dockerfile:1.3-labs
FROM archlinux

COPY --from=homeport/source /usr/share/homeport/ /usr/share/homeport/

RUN <<EOR
pacman-key --init
pacman-key --populate archlinux
pacman --noconfirm -Sy archlinux-keyring
pacman --noconfirm -Su
pacman --noconfirm -S openssh sudo
groupadd -g 1983 homeport
useradd -s /bin/bash -u 1983 -g 1983 -d /home/homeport homeport

cat <<EOSSH > /etc/ssh/sshd_config
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
UsePAM yes
AllowTcpForwarding no
GatewayPorts no
X11Forwarding no
Subsystem sftp /usr/lib/ssh/sftp-server
EOSSH

echo "homeport ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

mkdir -p /home/homeport
mkdir -p /var/run/sshd
EOR

EXPOSE 22

LABEL io.homeport true
EOF
}

function echo_fedora_dockerfile () {
    cat <<EOF
# syntax=docker/dockerfile:1.3-labs
FROM fedora

COPY --from=homeport/source /usr/share/homeport/ /usr/share/homeport/

RUN <<EOR
dnf upgrade --assumeyes --refresh
dnf install --assumeyes sudo openssh-server
groupadd -g 1983 homeport
useradd -s /bin/bash -u 1983 -g 1983 -d /home/homeport homeport

cat <<EOSSH > /etc/ssh/sshd_config
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
UsePAM yes
AllowTcpForwarding no
GatewayPorts no
X11Forwarding no
Subsystem sftp /usr/lib/ssh/sftp-server
EOSSH

echo "homeport ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

mkdir -p /home/homeport
mkdir -p /var/run/sshd
EOR

EXPOSE 22

LABEL io.homeport true
EOF
}

function echo_gentoo_dockerfile () {
    cat <<EOF
# syntax=docker/dockerfile:1.3-labs
# Use the empty image with the portage tree as the first stage
FROM gentoo/portage:latest as portage

# Gentoo stage3 is the second stage, basically an unpacked Gentoo Linux
FROM gentoo/stage3-amd64:latest as gentoo

# Copy the portage tree into the current stage
COPY --from=portage /var/db/repos/gentoo /var/db/repos/gentoo

RUN echo 'ACCEPT_KEYWORDS="~amd64"' >> /etc/portage/make.conf

RUN emerge -qv app-admin/sudo

RUN <<EOR
groupadd -g 1983 homeport
useradd -s /bin/bash -u 1983 -g 1983 -d /home/homeport homeport

cat <<EOSSH > /etc/ssh/sshd_config
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
UsePAM yes
AllowTcpForwarding no
GatewayPorts no
X11Forwarding no
Subsystem sftp /usr/lib/ssh/sftp-server
EOSSH

echo "homeport ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

mkdir -p /home/homeport
mkdir -p /var/run/sshd
EOR

COPY --from=homeport/source /usr/share/homeport/ /usr/share/homeport/

EXPOSE 22

LABEL io.homeport true
EOF
}

function echo_ubuntu_dockerfile () {
    cat <<EOF
# syntax=docker/dockerfile:1.3-labs
FROM ubuntu:focal

COPY --from=homeport/source /usr/share/homeport/ /usr/share/homeport/

RUN <<EOR
apt-get update
apt-get -y upgrade
apt-get -y autoremove
apt-get -y install openssh-server bindfs sudo
mkdir /etc/homeport
/usr/sbin/groupadd --gid 1983 homeport
/usr/sbin/useradd --shell /bin/bash --gid 1983 --uid 1983 homeport
mkdir -p /home/homeport
mkdir -p /var/run/sshd
echo "homeport ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
EOR

EXPOSE 22

LABEL io.homeport true
EOF
}

function echo_alpine_dockerfile () {
    cat <<EOF
# syntax=docker/dockerfile:1.3-labs
FROM alpine

COPY --from=homeport/source /usr/share/homeport/ /usr/share/homeport/

RUN <<EOR
apk --no-progress update
apk --no-progress add sudo openssh bash shadow openssh-server-pam
addgroup -g 701 homeport
adduser --shell /bin/ash --uid 701 --ingroup homeport --disabled-password homeport

cat <<EOF > /etc/ssh/sshd_config
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
UsePAM yes
AllowTcpForwarding no
GatewayPorts no
X11Forwarding no
Subsystem sftp /usr/lib/ssh/sftp-server
EOSSH

echo "homeport ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

mkdir -p /home/homeport
mkdir -p /var/run/sshd
wget -q https://download.docker.com/linux/static/stable/x86_64/docker-20.10.3.tgz
tar zxvf docker-20.10.3.tgz docker/docker >/dev/null
mv docker/docker /usr/local/bin/
rm docker-20.10.3.tgz
EOR

EXPOSE 22

LABEL io.homeport true
EOF
}

function abend () {
    local message=$1
    echo $message
    exit 1
}

function homeport_dockerfile () {
    local argv=()
    argv=$(getopt --options + --long no-cache,distro: -- "$@") || exit 1
    eval "set -- $argv"
    while true; do
        case "$1" in
            --distro)
                shift
                distro=$1
                shift
                ;;
            --)
                shift
                break
                ;;
        esac
    done
    case "$distro" in
        archlinux )
            echo_archlinux_dockerfile
            ;;
        fedora )
            echo_fedora_dockerfile
            ;;
        ubuntu )
            echo_ubuntu_dockerfile
            ;;
        alpine )
            echo_alpine_dockerfile
            ;;
        gentoo )
            echo_gentoo_dockerfile
            ;;
    esac
}

function homeport_run () {
    local options=$(parse_options 'docker' 'run' '--help')
    local argv=()
    argv=$($options "$@") || exit 1
    eval "set -- $argv"
    run_options=''
    while true; do
        opt=$1
        if [[ "$opt" == '--' ]]; then
            shift
            break
        elif [[ "$options" == *"${opt##+(-)}:"* ]]; then
            run_options+=$(printf %q "$1")' '$(printf %q "$2")' '
            shift
            shift
        else
            run_options+=$(printf %q "$1")' '
            shift
        fi
    done
    image=$1
    shift
    run_options+='--entrypoint /usr/share/homeport/container/sshd '
    run_options+='--publish 22 '
    run_options+='--detach '
    run_options+='--mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock '
    run_options+='--label io.homeport=true '
    run_options+='--entrypoint /usr/share/homeport/container/sshd '
    run_options+='--mount source=homeport-home,destination=/home/homeport '
#    run_options+='--mount type=bind,source='$(printf %q "$HOME")'/.ssh,destination=/home/homeport/.ssh '
    docker $docker_options run $run_options $image HOME=
}

# https://stackoverflow.com/a/28786207/90123
function homeport_authorize () {
    keys=$(cat -- "${1:--}")
    while read -r line; do
        ssh-keygen -l -f <(echo "$line") || abend "invalid ssh key"
    done < <(echo "$keys")
    echo "$keys" | docker run --mount source=homeport-home,destination=/home/homeport -i --rm alpine ash -c '
        mkdir -p /home/homeport/.ssh &&
        touch /home/homeport/.ssh/authorized_keys &&
        chown -R 1983:1983 /home/homeport/.ssh /home/homeport/.ssh/authorized_keys &&
        chmod og-rwx /home/homeport/.ssh /home/homeport/.ssh/authorized_keys &&
        cat - >> /home/homeport/.ssh/authorized_keys
    '
}

function update_config () {
    local homeport_container=$1
    local alias=$2

    if [[ -z "$alias" ]]; then
        alias=$homeport_container
    fi

    ssh_host=$(docker inspect --format '{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostIp}}' "$homeport_container")

    if [[ "$ssh_host" = "0.0.0.0" ]]; then
        ssh_host=127.0.0.1
    fi

    ssh_port=$(docker port $homeport_container 22 | cut -d: -f2)
    rsa_ssh_key=$({ docker cp $homeport_container:/etc/ssh/ssh_host_rsa_key.pub - | tar -Oxvf - ssh_host_rsa_key.pub | cut -d' ' -f1,2; } 2>/dev/null)

    mkdir -p ~/.ssh/homeport
    touch ~/.ssh/homeport/known_hosts

    sed -i.bak -e '/^\['$ssh_host']:'$ssh_port'/d' ~/.ssh/homeport/known_hosts

    echo "[$ssh_host]:$ssh_port $rsa_ssh_key" >> ~/.ssh/homeport/known_hosts

    touch ~/.ssh/homeport.config
    sed -i.bak '/^Host '$alias'$/,/^# End Host$/d' ~/.ssh/homeport.config

    cat <<EOF >> ~/.ssh/homeport.config
Host $alias
    User homeport
    Hostname $ssh_host
    Port $ssh_port
    UserKnownHostsFile ~/.ssh/homeport/known_hosts
# End Host
EOF

    if [[ ! -e ~/.ssh/config ]] || ! grep 'Include  *~/\.ssh/homeport.config' ~/.ssh/config > /dev/null; then
        echo 'You must add the following line to your ~/.ssh/config'
        echo ''
        echo 'Include ~/.ssh/homeport.config'
        echo ''
    fi
}

options=$(parse_options 'docker' '--help')

declare argv
argv=$($options "$@") || exit 1
eval "set -- $argv"

docker_options=''

while true; do
    opt=$1
    if [[ "$opt" == '--' ]]; then
        shift
        break
    elif [[ "$opt" == '-v' || "$opt" == '--version' ]]; then
        echo "Homeport Version 1.0.0"
        exit
    elif [[ "$options" == *"${opt##+(-)}:"* ]]; then
        docker_options+=$(printf %q "$1")' '$(printf %q "$2")' '
        shift
        shift
    else
        docker_options+=$(printf %q "$1")' '
        shift
    fi
done

command=$1
shift

case "$command" in
    dockerfile)
        homeport_dockerfile "$@"
        ;;
    run)
        homeport_run "$@"
        ;;
    authorize)
        homeport_authorize "$@"
        ;;
    config)
        update_config "$@"
        ;;
esac
